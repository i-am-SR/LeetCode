class Solution {
    public int largestRectangleArea(int[] heights) {
        // Dekha
        int maxArea = 0;
        Stack<Integer> stack = new Stack<>(); // stack that stores the currently viewed indexes in increasing order of their heights
        int i, currHeight;
        for(i = 0; i <= heights.length; i++){
            currHeight = (i == heights.length ? 0 : heights[i]);
            if(stack.isEmpty() || currHeight >= heights[stack.peek()]){
                stack.push(i);
            }
            else{
                    int topIndex = stack.pop();
                    int area = heights[topIndex]; //put the height in area. we will multiply it with the width to get the actual area
                    /*
                    if stack is empty => the topIndex contains the lowest height seen till now.
                    This means that all the indexes seen till(i) now have heights >= this height
                    */
                    if(stack.isEmpty()){
                        area *= i;
                    }
                    /*
                    if stack is not empty => the next top value on the stack is the index where the height is lower than the heights from topIndex to i-1
                    So, the width of heights[topIndex] will be i - 1 - stack.peek()
                    */
                    else{
                        area *= i - 1 - stack.peek();
                    }
                    maxArea = Math.max(maxArea, area);
                    i--; // so that we dont move to the next height index until all the bigger height indexes are popped
            }
        }
        return maxArea;
    }
}