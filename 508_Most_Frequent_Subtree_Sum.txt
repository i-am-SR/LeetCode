/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<Integer, Integer> map= new HashMap<>();
    public int[] findFrequentTreeSum(TreeNode root) {
        subTreeSum(root);
        int max=-1;
        List<Integer> temp = new ArrayList<>();
        for(Map.Entry<Integer, Integer> entry: map.entrySet())
        {
            if(entry.getValue()>max)
            {
                max=entry.getValue();
            }
        }
        for(Map.Entry<Integer, Integer> entry: map.entrySet())
        {
            if(entry.getValue()==max)
            {
                temp.add(entry.getKey());
            }
        }
        int []result = new int[temp.size()];
        for(int i=0;i<temp.size();i++)
            result[i]=temp.get(i);
        return result;
    }
    private int subTreeSum(TreeNode node)
    {
        int tempSum;
        if(node==null)
            return 0;
        tempSum=node.val+subTreeSum(node.left)+subTreeSum(node.right);
        map.put(tempSum, map.getOrDefault(tempSum, 0)+1);
        /*
        if(map.containsKey(tempSum))
            map.put(tempSum, map.get(tempSum)+1);
        else
        {
            map.put(tempSum, 1);
        } */           
        return tempSum;
    }
}