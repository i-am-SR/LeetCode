class Solution {
    public int[][] kClosest(int[][] points, int K) {
        /* Using maxHeap increases the run time
        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((a,b) -> b[2] - a[2]);
        for(int[] point: points){
            maxHeap.offer(new int[]{point[0], point[1], point[0]*point[0] + point[1]*point[1]});
            if(maxHeap.size() > K)
                maxHeap.poll();
        }*/
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a,b) -> a[2] - b[2]);
        for(int[] point: points){
            minHeap.offer(new int[]{point[0], point[1], point[0]*point[0] + point[1]*point[1]});
        }
        int[][] result = new int[K][2];
        int idx = 0;
        while(idx < K){
            int[] temp = minHeap.poll();
            result[idx][0] = temp[0];
            result[idx++][1] = temp[1];
        }
        return result;
    }
}