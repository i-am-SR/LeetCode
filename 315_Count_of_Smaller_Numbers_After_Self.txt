class Solution {
    public List<Integer> countSmaller(int[] nums) {
        Integer []temp= new Integer[nums.length]; // To make sure that line with ** works
        List<Integer> mergeList= new ArrayList<>(); // List to perform merge insert and gte the number of values smaller than itself
        for(int i=nums.length-1;i>=0;i--)
        {
            temp[i] = mergeInsert(nums, nums[i], mergeList);
        }
        List<Integer> result = new ArrayList<Integer>(Arrays.asList(temp)); // **
        /*
        int[] is considered as a single Object instance since a primitive array extends from Object. This would work if you have Integer[] instead of int[] since now you're sending an array of Object.
        */
        return result;
    }
    private int mergeInsert(int []nums, int curr, List<Integer> mergeList)
    {
        /*
        Use binary insert for the current integer on the mergeList(which is being created in sorted order) the index of insertion of the current integer will tell us the number of values less than it
        */
        int lo =0;
        int hi =mergeList.size();
        int mid = 0;
        while(lo<hi)
        {
            mid=lo+(hi-lo)/2;
            if(mid == mergeList.size() - 1 && curr > mergeList.get(mid))
            {
                mid ++;
                break;
            }
            if(curr > (mid == 0 ? Integer.MIN_VALUE: mergeList.get(mid - 1)) && curr <=  mergeList.get(mid))
                break;
            else if(curr > mergeList.get(mid))
                lo = mid+1;
            else if(curr <= mergeList.get(mid))
                hi = mid;
        }
        mergeList.add(mid, curr);
        return mid;
    }
}