class Solution {
    private int len, wid;
    private boolean result = false;
    public boolean exist(char[][] board, String word) {
        len = board.length;
        wid = board[0].length;
        Set<String> visited = new HashSet<>();
        for(int i =0; i<len;i++){
            for(int j =0; j<wid;j++){
                //visited = new HashSet<>();
                bfs(board, word, 0, i, j, visited);
            }
        }
        return result;
    }
    private void bfs(char[][] board, String word, int currIndex, int i, int j, Set<String> visited){
        int[] curr = new int[]{i,j};
        if(board[i][j] == word.charAt(currIndex) && !result){
            visited.add(Arrays.toString(curr));
            if(word.length() == currIndex+1){
                result = true;
                return;
            }
            else{
                if(i + 1 < len){
                    int []next = new int[]{i+1,j};
                    if(!visited.contains(Arrays.toString(next)))
                        bfs(board, word, currIndex+1, i+1, j, visited);
                }
                if(i - 1 >= 0){
                    int []next = new int[]{i-1,j};
                    if(!visited.contains(Arrays.toString(next)))
                        bfs(board, word, currIndex+1, i-1, j, visited);
                }
                if(j - 1 >= 0){
                    int []next = new int[]{i,j-1};
                    if(!visited.contains(Arrays.toString(next)))
                        bfs(board, word, currIndex+1, i, j-1, visited);
                }
                if(j + 1 < wid){
                    int []next = new int[]{i,j+1};
                    if(!visited.contains(Arrays.toString(next)))
                        bfs(board, word, currIndex+1, i, j+1, visited);
                }
            }
            visited.remove(Arrays.toString(curr));
        }
    }
}