class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {//Topological sort
        int[] inDegree = new int[numCourses];
        Map<Integer, List<Integer>> graph = new HashMap<>(); // holds the adjacency list
        for(int []edge: prerequisites)
        {
            inDegree[edge[0]]++;
            graph.putIfAbsent(edge[1], new ArrayList<Integer>());
            graph.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<numCourses; i++)
        {
            if(inDegree[i] == 0)
                q.offer(i); // Add all the courses with no pre-requisites
        }
        int result[] = new int[numCourses];
        int iter =0;
        while(!q.isEmpty())
        {
            int course= q.poll();
            result[iter++] = course;
            if(graph.containsKey(course))
            {
                for(int x: graph.get(course))
                {
                    if(--inDegree[x] == 0)
                        q.offer(x); // Add all the courses whose pre-requisites have been fulfilled (in degree is 0 now)
                }
            }
        }
        return iter == numCourses ? result : new int[0]; // If there is any directed cycle in the graph not all nodes will be expanded.
    }
}