/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int diff = 0; // the difference in length between the 2 lists
        Stack<Integer> stack = new Stack<>(); // stack for addition
        ListNode head1 = l1, head2 = l2;
        while(head1 != null || head2 != null){
            if(head1 != null){
                head1 = head1.next;
            }
            else{
                diff--;
            }
            if(head2 != null){
                head2 = head2.next;
            }
            else{
                diff++;
            }
        }
        if(diff < 0){ // l1 is shorter than l2 => swap to make l1 longer
            ListNode temp = l1;
            l1 = l2;
            l2 = temp;
        }
        diff = Math.abs(diff);
        /*
        The first few extra nodes of the longer list l1 are pushed into the stack
        */
        for(int i = 0; i < diff; i++){
            stack.push(l1.val);
            l1 = l1.next;
        }
        /*
        Sum the remaining nodes of l1 with teh corresponding noes in l2 and push to the stack
        */
        while(l1 != null){
            stack.push(l1.val + l2.val);
            l1 = l1.next;
            l2 = l2.next;
        }
        ListNode head = null;
        ListNode prev;
        int value, carry = 0;
        /*
        Keep popping the stack to form the final list
        */
        while(!stack.isEmpty()){
            value = stack.pop() + carry;
            carry = value / 10;
            value = value % 10;
            prev = new ListNode(value);
            prev.next = head;
            head = prev;
        }
        if(carry > 0){
            prev = new ListNode(carry);
            prev.next = head;
            head = prev;
        }  
        return head;
    }
}