class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> result = new ArrayList<>();
        boolean newIntervalAdded = false;
        for(int[] currInterval: intervals){
            //if the interval has not been added to the result
            if(!newIntervalAdded){
                // no overlap - new interval before current interval
                if(newInterval[1] < currInterval[0]){
                    result.add(newInterval);
                    result.add(currInterval);
                    newIntervalAdded = true;
                }
                // no overlap - new interval after current interval
                else if(newInterval[0] > currInterval[1])
                    result.add(currInterval);
                // overlap - merge the 2 intervals and store the merged interval in newInterval
                else if((newInterval[0] <= currInterval[0] && newInterval[1] >= currInterval[0]) || (newInterval[0] >= currInterval[0] && newInterval[0] <= currInterval[1])){
                    newInterval[0] = Math.min(newInterval[0], currInterval[0]);
                    newInterval[1] = Math.max(newInterval[1], currInterval[1]);
                }
            }
            //if the interval has already been added to the result
            else{
                result.add(currInterval);
            }
        }
        //if the interval has still not been added to the result (might be the merged interval we created in prev steps)
        if(!newIntervalAdded)
            result.add(newInterval);
        // convert list to array
        int [][]resultArr = new int[result.size()][2];
        int index = 0;
        for(int[] interval: result){
            resultArr[index][0] = interval[0];
            resultArr[index++][1] = interval[1];
        }
        return resultArr;
    }
}