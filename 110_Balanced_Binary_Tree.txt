/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        return findHeight(root) != -1;
    }
    /*
    Function the return the height of the node
    it returns -1 if the node itself is unbalanced (i.e. the absolute height difference is > 1) or one of its children is unbalanced
    */
    private int findHeight(TreeNode node){
        if(node == null)
            return 0;
        int leftHeight = findHeight(node.left);
        if(leftHeight == -1)
            return -1;
        int rightHeight = findHeight(node.right);
        if(rightHeight == -1)
            return -1;
        if(Math.abs(leftHeight - rightHeight) > 1)
            return -1;
        return Math.max(leftHeight, rightHeight) + 1;            
    }
}