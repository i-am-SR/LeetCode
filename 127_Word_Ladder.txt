class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        int level = 0;
        Queue<String> q = new LinkedList<>();
        if(beginWord.length() != 0){
            q.offer(beginWord);
            level++;
        }
        else
            return 0;
        Set<String> wordListSet = new HashSet<>();
        for(String x: wordList)
            wordListSet.add(x);
        if(!wordListSet.contains(endWord))
            return 0;
        while(!q.isEmpty())
        {
            int size = q.size();
            while(size>0)
            {
                size--;
                String curr = q.poll();
                if(curr.equals(endWord)){
                    return level;
                }
                for(int i = 0; i < curr.length(); i++){
                    char[] tempArr = curr.toCharArray();
                    for(char c = 'a'; c <= 'z' ; c++){
                        tempArr[i] = c;
                        String temp = new String(tempArr);
                        if(wordListSet.contains(temp)){
                            q.offer(temp);
                            wordListSet.remove(temp); // remove from the wordList to avoid visiting it again.
                        }
                    }
                }
            }
            level++;
        }
        return 0;
    }
}