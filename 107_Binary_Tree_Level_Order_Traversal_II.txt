/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
        Map<Integer, List<Integer>> map=new HashMap<>();
        function(root, map, 0);
        for(Map.Entry<Integer,List<Integer>> entry: map.entrySet())
        {
            result.add(entry.getValue());
        }
        Collections.reverse(result);
        return result;
    }
    private void function(TreeNode node, Map<Integer, List<Integer>> map, int level)
    {
        if(node!=null)
        {
            if(map.containsKey(level))
            {
                map.get(level).add(node.val);
            }
            else
            {
                List<Integer> list=new ArrayList<>();
                list.add(node.val);
                map.put(level,list);
            }
            function(node.left, map, level+1);
            function(node.right, map, level+1);
        }
    }
}


======================================================


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        Queue<TreeNode> q = new LinkedList();
        List<List<Integer>> result = new ArrayList();
        if(root != null)
            q.offer(root);
        int size = 1;
        while(!q.isEmpty())
        {
            List<Integer> l = new ArrayList();
            int size_new = size;
            size = 0;
            for(int x = 0; x < size_new; x++)
            {
                if(x == 0)
                    size = 0;
                TreeNode curr = q.poll();
                if(curr.left != null)
                {
                    size++;
                    q.offer(curr.left);
                }
                if(curr.right != null)
                {
                    size++;
                    q.offer(curr.right);
                }
                l.add(curr.val);
            }
            result.add(0, l);
        }
        return result;
    }
}