class Solution {
    //dekha
    public boolean judgePoint24(int[] nums) {
        double[] arr = new double[]{nums[0], nums[1], nums[2], nums[3]}; // add the 4 numbers to a double array as division is also involved.
        return findCombs(arr);
    }
    private boolean findCombs(double[] arr)
    {
        if(arr.length == 1) // if only one element is left in the array and it is either 24 or -24 return true. Using 0.001 as division may evaluate the number as 23.99999999999
            return Math.abs(arr[0] - 24) < 0.001;
        for(int i = 0; i < arr.length-1; i++)
        {
            for(int j = i+1; j < arr.length; j++)
            {   //double for loop to take 2 distinct values for the array
                double[] arrNew = new double[arr.length - 1]; // when we combine these 2 distinct values, we will be left with arr.length - 1 values.
                int index = 0;
                for(int k = 0; k < arr.length; k++)
                {
                    if(j != k && i != k)
                        arrNew[index++] = arr[k]; // add the arr.length - 2 values to the new array
                }
                for(double d: combinations(arr[i], arr[j])) // last value is one of the possible combinations
                {
                    arrNew[index] = d;
                    if(findCombs(arrNew)) // if this combination can make 24
                        return true;
                }
            }
        }
        return false;
    }
    private double[] combinations(double a, double b)
    {
        return new double[]{a + b, a - b, b - a, a * b, a / b, b / a};
    }
}