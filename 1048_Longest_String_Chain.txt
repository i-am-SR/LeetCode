class Solution {
    public int longestStrChain(String[] words) {
        // Dekha DP solution
        Map<String, Integer> map = new HashMap<>();
        int result = 0;
        Arrays.sort(words, (a,b) -> a.length() - b.length()); // Sort on increasing order of length
        for(String word: words)
        {
            int chainLen = 0;
            for(int i = 0; i<word.length(); i++)
            {
                String temp = word.substring(0, i) + word.substring(i + 1); // create a string that is one aplhabet removed from word
                chainLen = Math.max(chainLen, map.getOrDefault(temp, 0) + 1);
            }
            map.put(word, chainLen);
            result = Math.max(result, chainLen);
        }
        System.out.println(map);
        return result;
    }
}